@page "/Productos"
@page "/productos/{ProductoId:int}"

@using BLL
@using Models
@inject IToastService toast
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Producto" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-danger">
            <div class="card-header bg-danger text-lg-center">
                <h2 style="font-family :'Segoe UI'">Registro de Productos</h2>
            </div>

            <div class="card-body">
                <div class="form">

                    @*Producto Id*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Producto Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Producto.ProductoId" class="form-control col-3" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Descripción*@
                    <div class="form-group">
                        <label>Descripción</label>
                        <InputText @bind-Value="Producto.Descripción" class="form-control" />
                        <ValidationMessage For="@(() => Producto.Descripción)" />
                    </div>

                    <div class="form-group form-row">
                        @*Unidad*@
                        <div class="col-6">
                            <label>Unidad</label>
                            <InputText @bind-Value="Producto.Unidad" class="form-control" />
                            <ValidationMessage For="@(() => Producto.Unidad)" />
                        </div>

                        @*Marca*@
                        <div class="col-6">
                            <label>Marcas</label>
                            <InputSelectNumber class="form-control" @bind-Value="Producto.MarcaId">
                                <option disabled="disabled" selected="selected">Elija una opción</option>
                                @foreach (var auxiliar in LlenarComboMarcas())
                                {
                                    <option value="@auxiliar.MarcaId">@auxiliar.Descripcion</option>
                                }
                            </InputSelectNumber>
                        </div>
                    </div>

                    @*Precio unitario*@
                <div class="form-row form-group">
                    <div class="col-6">
                        <label>Precio unitario</label>
                        <InputNumber @bind-Value="Producto.PrecioUnitario" class="form-control" @onfocusout="ActualizarValorInventario" />
                        <ValidationMessage For="@(() => Producto.PrecioUnitario)" />
                    </div>

                    <div class="col-6">
                        <label>Categorias</label>
                        <InputSelectNumber class="form-control" @bind-Value="Producto.MarcaId">
                            <option disabled="disabled" selected="selected">Elija una opción</option>
                            @foreach (var auxiliar in CategoriasBLL.GetList(p => true))
                                {
                                <option value="@auxiliar.CategoriaId">@auxiliar.Descripcion</option>
                                }
                        </InputSelectNumber>
                    </div>
                </div>

                    @*Inventario*@
                    <div class="form-group">
                        <label>Inventario</label>
                        <InputNumber @bind-Value="Producto.Inventario" class="form-control" readonly/>
                        <ValidationMessage For="@(() => Producto.Inventario)" />
                    </div>

                    @*Valor inventario*@
                    <div class="form-group">
                        <label>Valor inventario</label>
                        <InputNumber @bind-Value="Producto.ValorInventario" class="form-control" readonly />
                        <ValidationMessage For="@(() => Producto.ValorInventario)" />
                    </div>
                </div>
            </div>

            <div class="card-footer text-center" display: inline-block>
                <div class="form-group">

                    <button type="button" class="btn btn-lg btn-secondary" @onclick="Nuevo">
                        <span class="oi oi-plus" aria-hidden="true"></span> Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-info">
                        <span class="oi oi-circle-check" aria-hidden="true"></span> Guardar
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <span class="oi oi-circle-x"></span> Eliminar
                    </button>
                </div>
            </div>

        </div>
    </EditForm>
}
else
{
    <LoginControl/>
}

@code {
    [Parameter]
    public int ProductoId { get; set; }

    private Usuarios Usuario = new Usuarios();

    private Productos Producto = new Productos();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        LlenarComboMarcas();
        ObtenerUsuarioLogeado();

        if (ProductoId > 0)
        {
            Buscar(ProductoId);
        }

    }
    public void Buscar(int id)
    {
        var encontrado = ProductosBLL.Buscar(id);
        this.Producto = encontrado;
        ActualizarValorInventario();

    }
    public void Nuevo()
    {
        Producto = new Productos();
    }

    public void Buscar()
    {
        if (Producto.ProductoId > 0)
        {
            var encontrado = ProductosBLL.Buscar(Producto.ProductoId);

            if (encontrado != null)
            {
                this.Producto = encontrado;
                ActualizarValorInventario();
            }
            else
                toast.ShowWarning("Producto no encontrada");
        }
    }

    public void Guardar()
    {
        bool guardo = false;

        if (Producto.ProductoId >= 0 && Producto.MarcaId > 0)
        {
            Producto.UsuarioId = Usuario.UsuarioId;

            guardo = ProductosBLL.Guardar(Producto);

            if (guardo)
            {
                ActualizarValorInventario();
                if (ProductoId > 0)
                    Navigation.NavigateTo("consultaproductos", true);

                Nuevo();
                toast.ShowSuccess("Guardado exitosamente");
            }
            else
                toast.ShowError("No fue posible guardar");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
        }
    }

    public async void Eliminar()
    {
        if (VerificarNivelAcceso())
        {
            if (await js.InvokeAsync<bool>("ConfirmationPrumpt", "Confirmacion", "¿Esta seguro que desea eliminar este producto?", "question"))
            {
                bool eliminar = false;

                eliminar = ProductosBLL.Eliminar(Producto.ProductoId);

                if (eliminar)
                { 
                    toast.ShowSuccess("Eliminado correctamente");
                    await Task.Delay(2000);
                    Navigation.NavigateTo("productos", true);
                }
            else
                toast.ShowError("!No fue posible eliminar!");
        }
    }
        else
        {
            toast.ShowError("No puedes eliminar productos. !Solo los administradores pueden eliminar!");
        }
    }

    //Metodo para llenar el combo de marcas
    public List<Marcas> LlenarComboMarcas()
    {
        List<Marcas> listaMarcas = new List<Marcas>();

        try
        {
            listaMarcas = MarcasBLL.GetList(m => true);
        }
        catch (Exception)
        {
            throw;
        }

        return listaMarcas;
    }

    //Verificar si el valor inventario es menor que el precio unitario
    public void ActualizarValorInventario()
    {
        Producto.ValorInventario = (Producto.Inventario * Producto.PrecioUnitario);
    }

    public void ObtenerUsuarioLogeado()
    {
        Usuarios usuario = UsuariosBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            Usuario = usuario;
        }
    }

    public bool VerificarNivelAcceso()
    {
        bool paso = false;

        if (Usuario.NivelAcceso == "Administrador")
            paso = true;

        return paso;
    }

}
