@page "/Usuarios"
@page "/Usuarios/{UsuarioId:int}"

@using Models
@using BLL

@inject IToastService toast
@inject IJSRuntime js
@inject NavigationManager nav
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated && ComprobarAdministrador())
{
    <EditForm Model="Usuario" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-danger">
            <div class="card-header bg-danger text-lg-center">
                <h2 style="font-family :'Segoe UI'">Registro de Usuarios</h2>
            </div>

            <div class="card-body">
                <div class="form">

                    @*Usuario Id*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Usuario Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Usuario.UsuarioId" class="form-control col-3" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Nombre*@
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText @bind-Value="Usuario.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Nombre)" />
                    </div>

                    @*Apellido*@
                    <div class="form-group">
                        <label>Apellido</label>
                        <InputText @bind-Value="Usuario.Apellido" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Apellido)" />
                    </div>

                    @*Email*@
                    <div class="form-group">
                        <label class="label">Email</label>
                        <InputText @bind-Value="Usuario.Email" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Email)" />
                    </div>

                    @*Telefono*@
                    <div class="form-group">
                        <label>Telefono</label>
                        <InputText @bind-Value="Usuario.Telefono" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Telefono)" />
                    </div>

                    @*Nivel acceso*@
                    <div class="form-group">
                        <label>Nivel acceso</label>
                        <InputSelect @bind-Value="Usuario.NivelAcceso" class="form-control">
                            <option disabled="disabled" selected="selected">Elija una opción</option>
                            <option value="Empleado">Empleado</option>
                            <option value="Administrador">Administrador</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => Usuario.NivelAcceso)" />
                    </div>

                    @*Usuario*@
                    <div class="form-group">
                        <label>Usuario</label>
                        <InputText @bind-Value="Usuario.Usuario" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Usuario)" />
                    </div>

                    @*Contraseña*@
                <div class="form-row">
                    <div class="col form-group">
                        <label>Contraseña</label>
                        <input type="password" @bind="Usuario.Contraseña" class="form-control" />
                        <ValidationMessage For="@(() => Usuario.Contraseña)" />
                    </div>
                    <div class="col-6 form-group">
                        <label>Confirmar contraseña</label>
                        <div class="input-group">
                            <input type="password" @bind="ConfirmarContrasena" class="form-control" />
                            <button type="button" class="input-group-append btn btn-danger btn-block col-1" @onclick="PasswordCoincide"><span class="oi oi-chevron-left"></span></button>
                        </div>
                    </div>
                </div>
                </div>
            </div>

            <div class="card-footer text-center" display: inline-block>
                <div class="form-group">

                    <button type="button" class="btn btn-lg btn-secondary" @onclick="Nuevo">
                        <span class="oi oi-plus" aria-hidden="true"></span> Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-info">
                        <span class="oi oi-circle-check" aria-hidden="true"></span> Guardar
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <span class="oi oi-circle-x"></span> Eliminar
                    </button>
                </div>
            </div>

        </div>
    </EditForm>
}
else
{
    @if (!@ComprobarAdministrador())
    {
        toast.ShowWarning("Solo los administradores tienen acceso a interactuar con los usuarios");
    }
}

@code {
    [Parameter]
    public int UsuarioId { get; set; }

    private Usuarios UsuarioLogeado = new Usuarios();
    public string ConfirmarContrasena { get; set; }
    public bool Verificado { get; set; } = false;

    private Usuarios Usuario = new Usuarios();

    public string contrasena { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        ObtenerUsuarioLogeado();

        if (UsuarioId > 0)
            Buscar(UsuarioId);
    }

    public void Nuevo()
    {
        Usuario = new Usuarios();
    }

    public void Buscar(int id)
    {
        var encontrado = UsuariosBLL.Buscar(id);
        if (encontrado != null)
        {
            this.Usuario = encontrado;
        }
    }

    public void Buscar()
    {

        if (Usuario.UsuarioId > 0)
        {
            var encontrado = UsuariosBLL.Buscar(Usuario.UsuarioId);

            if (encontrado != null)
            {
                this.Usuario = encontrado;
            }
            else
                toast.ShowWarning("Producto no encontrada");
        }
    }

    public void Guardar()
    {
        PasswordCoincide();
        bool guardo = false;

        if (Usuario.UsuarioId >= 0 && Verificado)
        {
            guardo = UsuariosBLL.Guardar(Usuario);

            if (guardo)
            {
                if (UsuarioId > 0)
                    nav.NavigateTo("consultausuarios", true);

                Nuevo();
                toast.ShowSuccess("Guardado exitosamente");
            }
            else
                toast.ShowError("No fue posible guardar");
        }
        else
        {
            toast.ShowWarning("Las contraseñas no coinciden");
        }
    }

    public async void Eliminar()
    {
        if (!VerificoUsuarioActual())
        {
            if (await js.InvokeAsync<bool>("ConfirmationPrumpt", "Confirmacion", "¿Esta seguro que desea eliminar este usuario?", "question"))
            {
                bool eliminar = false;

                eliminar = UsuariosBLL.Eliminar(Usuario.UsuarioId);

                if (eliminar)
                {
                    Nuevo();
                    toast.ShowSuccess("Eliminado correctamente");
                }
                else
                    toast.ShowError("!No fue posible eliminar!");
            }
        }
        else
        {
            toast.ShowError("No se puede eliminar este usuario, debido a que esta logeado.");
        }
    }

    public void ObtenerUsuarioLogeado()
    {
        Usuarios usuario = UsuariosBLL.Buscar(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        if (usuario != null)
        {
            UsuarioLogeado = usuario;
        }
    }

    public bool ComprobarAdministrador()
    {
        bool paso = false;

        if (UsuarioLogeado.NivelAcceso.Equals("Administrador"))
            paso = true;

        return paso;
    }

    private bool VerificoUsuarioActual()
    {
        bool paso = false;

        if (UsuarioLogeado.UsuarioId == Usuario.UsuarioId)
            paso = true;

        return paso;
    }
    public void PasswordCoincide()
    {
        if (Usuario.Contraseña != ConfirmarContrasena)
        {
            toast.ShowWarning("Las contraseñas no coinciden");
        }
        else
        {
            Verificado = true;
            toast.ShowSuccess("Las contraseñas coinciden");
        }
    }
}
