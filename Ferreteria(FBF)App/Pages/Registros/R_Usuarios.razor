@page "/Usuarios"
@page "/Usuarios/{UsuarioId:int}"

@using Models
@using BLL

@inject IToastService toast
@inject IJSRuntime js
@inject NavigationManager nav

<EditForm Model="Usuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card border-danger">
        <div class="card-header bg-danger text-lg-center">
            <h2 style="font-family :'Segoe UI'">Registro de Usuarios</h2>
        </div>

        <div class="card-body">
            <div class="form">

                @*Usuario Id*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Usuario Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Usuario.UsuarioId" class="form-control col-3" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombre*@
                <div class="form-group">
                    <label>Nombre</label>
                    <InputText @bind-Value="Usuario.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => Usuario.Nombre)"/>
                </div>

                @*Apellido*@
                <div class="form-group">
                    <label>Apellido</label>
                    <InputText @bind-Value="Usuario.Apellido" class="form-control" />
                    <ValidationMessage For="@(() => Usuario.Apellido)" />
                </div>

                @*Email*@
                <div class="form-group">
                    <label class="label">Email</label>
                    <InputText @bind-Value="Usuario.Email" class="form-control" />
                    <ValidationMessage For="@(() => Usuario.Email)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Telefono</label>
                    <InputText @bind-Value="Usuario.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => Usuario.Telefono)" />
                </div>

                @*Usuario*@
                <div class="form-group">
                    <label>Usuario</label>
                    <InputText @bind-Value="Usuario.Usuario" class="form-control" />
                    <ValidationMessage For="@(() => Usuario.Usuario)" />
                </div>

                @*Contraseña*@
            <div class="form-group">
                <label>Contraseña</label>
                <InputText @bind-Value="Usuario.Contraseña" class="form-control" />
                <ValidationMessage For="@(() => Usuario.Contraseña)" />
            </div>
            </div>
        </div>

        <div class="card-footer text-center" display: inline-block>
            <div class="form-group">

                <button type="button" class="btn btn-lg btn-secondary" @onclick="Nuevo">
                    <span class="oi oi-plus" aria-hidden="true"></span> Nuevo
                </button>

                <button type="submit" class="btn btn-lg btn-info">
                    <span class="oi oi-circle-check" aria-hidden="true"></span> Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <span class="oi oi-circle-x"></span> Eliminar
                </button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int UsuarioId { get; set; }

    private Usuarios Usuario = new Usuarios();

    public string contrasena { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        if (UsuarioId > 0)
            Buscar(UsuarioId);
    }

    public void Nuevo()
    {
        Usuario = new Usuarios();
    }

    public void Buscar(int id)
    {
        var encontrado = UsuariosBLL.Buscar(id);
        if (encontrado!=null)
        {
            this.Usuario = encontrado;
            Usuario.Contraseña = DesEncriptar();
        }
    }

    public void Buscar()
    {

        if (Usuario.UsuarioId > 0)
        {
            var encontrado = UsuariosBLL.Buscar(Usuario.UsuarioId);

            if (encontrado != null)
            {
                this.Usuario = encontrado;
                Usuario.Contraseña = DesEncriptar();
            }
            else
                toast.ShowWarning("Producto no encontrada");
        }
    }

    public void Guardar()
    {
        bool guardo = false;

        if (Usuario.UsuarioId >= 0)
        {
            Usuario.Contraseña = Encriptar();
            guardo = UsuariosBLL.Guardar(Usuario);

            if (guardo)
            {
                if (UsuarioId > 0)
                    nav.NavigateTo("consultausuarios", true);

                Nuevo();
                toast.ShowSuccess("Guardado exitosamente");
            }
            else
                toast.ShowError("No fue posible guardar");
        }
    }

    public async void Eliminar()
    {
        if (await js.InvokeAsync<bool>("ConfirmationPrumpt", "Confirmacion", "¿Esta seguro que desea eliminar este usuario?", "question"))
        {
            bool eliminar = false;

            eliminar = UsuariosBLL.Eliminar(Usuario.UsuarioId);

            if (eliminar)
            {
                Nuevo();
                toast.ShowSuccess("Eliminado correctamente");
            }
            else
                toast.ShowError("!No fue posible eliminar!");
        }
    }

    public string Encriptar()//Esta función encripta la cadena que se le pasa por parámentro
    {
        string resultado = string.Empty;
        byte[] encryted = System.Text.Encoding.Unicode.GetBytes(Usuario.Contraseña);
        resultado = Convert.ToBase64String(encryted);
        return resultado;
    }

    public string DesEncriptar()//Esta función desencripta la cadena que se le pasa por parámentro
    {
        string resultado = string.Empty;
        byte[] decryted = Convert.FromBase64String(Usuario.Contraseña);
        resultado = System.Text.Encoding.Unicode.GetString(decryted);
        return resultado;
    }
}
