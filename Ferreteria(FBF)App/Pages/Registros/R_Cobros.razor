@page "/Cobros"
@page "/Cobros/{CobroId:int}"

@using BLL
@using Models
@inject IToastService toast
@inject IJSRuntime js
@inject NavigationManager nav

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card border-danger">
        <div class="card-header bg-danger text-lg-center">
            <h2 style="font-family :'Segoe UI'">Registro de Cobros</h2>
        </div>

        <div class="card-body">
            <div class="form">

                @*Cobro Id*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Cobro Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Cobro.CobroId" class="form-control col-3" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Cliente Id*@
                <div class="form-group">
                    <label>Cliente Id</label>
                    <InputSelectNumber class="form-control" @bind-Value="Cobro.ClienteId" @onclick="pullBalance">
                        <option disabled="disabled" selected="selected">Elija una opción</option>
                        @foreach (var auxiliar in LlenarComboCliente())
                        {
                            <option value="@auxiliar.ClienteId">@auxiliar.Nombre @auxiliar.Apellido</option>
                        }
                    </InputSelectNumber>
                </div>

                @*Fecha*@
                <div class="form-group date">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Cobro.Fecha)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="Cobro.Monto" @onfocusin="CalcularBalance" class="form-control" />
                    <ValidationMessage For="@(() => Cobro.Monto)" />
                </div>

                @*Balance*@
                <div class="form-group">
                    <label>Balance cliente</label>
                    <InputNumber @bind-Value="BalanceCobro" class="form-control" readonly/>
                </div>
            </div>
        </div>

        <div class="card-footer text-center" display: inline-block>
            <div class="form-group">

                <button type="button" class="btn btn-lg btn-secondary" @onclick="Nuevo">
                    <span class="oi oi-plus" aria-hidden="true"></span> Nuevo
                </button>

                <button type="submit" class="btn btn-lg btn-info">
                    <span class="oi oi-circle-check" aria-hidden="true"></span> Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <span class="oi oi-circle-x"></span> Eliminar
                </button>
            </div>
        </div>

    </div>
</EditForm>

@code{
    [Parameter]
    public int CobroId { get; set; }

    private Cobros Cobro = new Cobros();
    public double BalanceCobro { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        LlenarComboCliente();
        if (CobroId > 0)
            Buscar(CobroId);
    }

    public void Nuevo()
    {
        BalanceCobro = 0;
        Cobro = new Cobros();
    }
    public void Buscar(int id)
    {
        var encontrado = CobrosBLL.Buscar(id);

        if (encontrado != null)
            this.Cobro = encontrado;
    }
    public void Buscar()
    {

        if (Cobro.CobroId > 0)
        {
            var encontrado = CobrosBLL.Buscar(Cobro.CobroId);

            if (encontrado != null)
                this.Cobro = encontrado;
            else
                toast.ShowWarning("Cobro no encontrada");
        }
    }

    public void Guardar()
    {
        bool guardo = false;

        if (Cobro.CobroId >= 0)
        {
            guardo = CobrosBLL.Guardar(Cobro);

            if (guardo)
            {
                if (CobroId > 0)
                    nav.NavigateTo("consultacobros", true);

                Nuevo();
                toast.ShowSuccess("Guardado exitosamente");
            }
            else
                toast.ShowError("No fue posible guardo");
        }
    }

    public async void Eliminar()
    {
        if (await js.InvokeAsync<bool>("ConfirmationPrumpt", "Confirmacion", "¿Esta seguro que desea eliminar este cobro?", "question"))
        {
            bool eliminar = false;

            eliminar = CobrosBLL.Eliminar(Cobro.CobroId);

            if (eliminar)
            {
                Nuevo();
                toast.ShowSuccess("Eliminado correctamente");
            }
            else
                toast.ShowError("!No fue posible eliminar!");
        }
    }

    public List<Clientes> LlenarComboCliente()
    {
        List<Clientes> listaClientes = new List<Clientes>();

        try
        {
            listaClientes = ClientesBLL.GetList(c => true);
        }
        catch (Exception)
        {
            throw;
        }

        return listaClientes;
    }

    public void pullBalance()
    {
        if(ClientesBLL.Buscar(Cobro.ClienteId)!=null)
            BalanceCobro = ClientesBLL.Buscar(Cobro.ClienteId).Balance;
    }

    public void CalcularBalance()
    {
        BalanceCobro = ClientesBLL.Buscar(Cobro.ClienteId).Balance;
        BalanceCobro -= Cobro.Monto;
    }
}