@page "/ConsultaVentas"

@using BLL
@using Models
@inject IJSRuntime js
@inject IToastService toast
@inject IModalService modal
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card rounded" style="border-color:#dc3545">
        <div class="card-header text-lg-center" style="background-color: #dc3545">
            <h3><strong>Consulta de Ventas</strong></h3>
        </div>
        <div class="card-body">
            <div class="card">
                <div class="card-header" style="background-color:#CDCBCB">
                    <div class="row">
                        <div class="input-group col-12">
                            <div class="form-group col-2">
                                <label><strong>Desde: </strong></label>
                                <input type="date" class="form-control" @bind="Desde" />
                            </div>
                            <div class="form-group col-2">
                                <label><strong>Hasta: </strong></label>
                                <input type="date" class="form-control" @bind="Hasta" />
                            </div>
                            <div class="form-group col-3">
                                <label><strong>Filtro: </strong></label>
                                <select class="form-control" @bind="Filtro">
                                    <option value=0>Eliga un filtro</option>
                                    <option value=1>ID</option>
                                </select>
                            </div>
                            <div class="form-group col-3">
                                <label><strong>Criterio: </strong></label>
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Criterio" @bind="Criterio" />
                                    <button type="button" class="btn btn-danger input-group-append" @onclick="@(c => Consultar(0))">Consultar</button>
                                </div>
                            </div>
                            <div class="form-group col-2 col-md-2 ml-auto">
                                <label><strong>Ordenar por: </strong></label>
                                <select class="form-control" @bind="Order" @onclick="Ordenar" disabled="@(Items.Count>0 ? false : true)">
                                    <option value=0>Eliga una opcion</option>
                                    <option value=1>Total general</option>
                                    <option value=2>Credito</option>
                                    <option value=3>al contado</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">No.</th>
                                <th scope="col">Fecha</th>
                                <th scope="col">Tipo</th>
                                <th scope="col">Cliente</th>
                                <th scope="col">SubTotal</th>
                                <th scope="col">ITBIS</th>
                                <th scope="col">Descuentos</th>
                                <th scope="col">Total General</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ItemsList)
                            {
                                <tr>
                                    <td>@item.VentaId</td>
                                    <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Tipo</td>
                                    <td>@ClientesBLL.Buscar(item.ClienteId).Nombre @ClientesBLL.Buscar(item.ClienteId).Apellido</td>
                                    <td>@item.Total</td>
                                    <td>@item.ITBIS</td>
                                    <td>@item.Descuentos</td>
                                    <td>@item.TotalGeneral</td>
                                    <td><a class="btn btn-dark" href="@($"Ventas/{item.VentaId}")">Editar</a></td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
                <div class="card-footer" style="background-color:#CDCBCB">
                    <div class="row">
                        <div class="form-group col-4 mr-auto">
                            <label><strong>Total de ventas consultadas</strong></label>
                            <input type="number" class="form-control" @bind="TotalVentas" readonly/>
                        </div>
                        <div class="form-group col-2 col-md-2 ml-md-auto">
                            <label><strong>Reporte </strong></label>
                            <button type="button" class="btn btn-danger btn-block" @onclick="GeneratePdfToday"><span class="oi oi-print"></span> Ventas del dia</button>
                        </div>
                        <div class="form-group col-2 col-md-2 ml-auto">
                            <label><strong>Imprimir </strong></label>
                            <button type="button" class="btn btn-danger btn-block" @onclick="GeneratePdf"><span class="oi oi-print"></span> Consulta</button>
                        </div>
                    </div>
                </div>

            </div>
            <div class="card-footer" style="background-color: #dc3545">
                <div class="form-group text-center" display: inline-block>
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center">
                            <li class="page-item">
                                <button class="page-link btn btn-danger"
                                        @onclick="@(e => NavegateTo("Previous"))" tabindex="-1">
                                    Previous
                                </button>
                            </li>

                            @for (int i = 0; i < TotalPages; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item">
                                    <button class="@(CurrentPage == pageNumber ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                            @onclick="@(u => Consultar(pageNumber))">
                                        @(i + 1)
                                    </button>
                                </li>
                            }

                            <li class="page-item">
                                <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Next"))" tabindex="-1">Next</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <LoginControl />
}


@code {
    public List<Ventas> ItemsList { get; set; } = new List<Ventas>();
    public List<Ventas> Items { get; set; } = new List<Ventas>();

    public DateTime Desde { get; set; } = DateTime.Today;
    public DateTime Hasta { get; set; } = DateTime.Today;
    public string Criterio { get; set; } = string.Empty;
    public int Numeracion { get; set; }
    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }
    public int Filtro { get; set; }
    public int Order { get; set; }
    public double TotalDeuda { get; set; }
    public double TotalVentas { get; set; }

    protected override void OnInitialized()
    {

        // Items = repo.GetList(p => true);
        PageSize = 4;
        // ItemsList = Items.Take(PageSize).ToList();
        // TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        //  CalcularInventario();

        base.OnInitialized();
    }

    public void Consultar(int omite)
    {
        if (Criterio != string.Empty)
        {
            switch (Filtro)
            {
                case 0:
                    Items = VentasBLL.GetList(p => true);
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                    UpdateList(omite);
                    break;
                case 1:
                    int id = Convert.ToInt32(Criterio);
                    Items = VentasBLL.GetList(a => a.VentaId == id);
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                    UpdateList(omite);
                    break;
                case 2:
                    int clienteId = Convert.ToInt32(Criterio);
                    Items = VentasBLL.GetList(a => a.ClienteId == clienteId);
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                    UpdateList(omite);
                    break;
                case 3:
                    double total = Convert.ToDouble(Criterio);
                    Items = VentasBLL.GetList(a => a.TotalGeneral == total);
                    TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
                    UpdateList(omite);
                    break;
            }

            Items = Items.Where(c => c.Fecha >= Desde.Date && c.Fecha.Date <= Hasta.Date).ToList();

        }
        else
        {
            Items = VentasBLL.GetList(a => true);
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            UpdateList(omite);

        }

        TotalDeVentas();
    }

    private void UpdateList(int pageNumber)
    {
        ItemsList = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        CurrentPage = pageNumber;
        TotalDeVentas();
    }

    private void NavegateTo(string direction)
    {
        if (direction == "Previous" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "Next" && CurrentPage != TotalPages)
            CurrentPage += 1;

        UpdateList(CurrentPage);
    }

    private void Ordenar()
    {
        if (Order == 1)
        {
            ItemsList = new List<Ventas>();
            UpdateList(CurrentPage);
            ItemsList = ItemsList.OrderByDescending(x => x.TotalGeneral).ToList();
        }
        if (Order == 2)
        {
            ItemsList = new List<Ventas>();
            UpdateList(CurrentPage);
            ItemsList = ItemsList.OrderBy(x => x.Tipo == "Credito").ToList();
        }
        if (Order == 3)
        {
            ItemsList = new List<Ventas>();
            UpdateList(CurrentPage);
            ItemsList = ItemsList.OrderBy(x => x.Tipo == "Al contado").ToList();
        }


    }
    public void CalcularInventario()
    {
        TotalDeuda = 0;
        foreach (var item in Items)
        {
            TotalDeuda += item.TotalGeneral;
        }

    }
    public void TotalDeVentas()
    {
        TotalVentas = 0;
        foreach (var item in Items)
        {
            TotalVentas += item.TotalGeneral;
            TotalVentas = Math.Round(TotalVentas, 2);
        }
    }
    public void GeneratePdf()
    {
        VentasReport ventas = new VentasReport();

        if(Items.Count > 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Items", Items);

            modal.Show<Herramientas.VentasViewer>("Reporte de ventas", parameters);
        }
        else
        {
            toast.ShowWarning("No hay datos para imprimir, debe hacer una consulta");
        }

    }

    public void GeneratePdfToday()
    {
        VentasReport ventas = new VentasReport();

        List<Ventas> listaVentas = new List<Ventas>();

        if (VentasBLL.GetList(p => p.Fecha == DateTime.Today).Count != 0)
        {
            listaVentas = VentasBLL.GetList(p => p.Fecha == DateTime.Today);
            var parameters = new ModalParameters();
            parameters.Add("Items", listaVentas);

            modal.Show<Herramientas.VentasViewer>("Reporte de ventas del dia", parameters);
        }
        else
        {
            toast.ShowWarning("No se ha realizado ninguna venta hoy");
        }

    }

}
